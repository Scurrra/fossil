{"repository_name":"fossil","body":"# fossil\n\nFossil is a simple framework for building APIs.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     fossil:\n       github: Scurrra/fossil\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"fossil\"\n```\n\nA detailed guide can be found [here](https://scurrra.github.io/blog/fossil-guide/).\n\n## TODO\n- Proper testing.\n- Better documentation.\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/fossil/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Scurrra](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"fossil/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"fossil","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"fossil/ContentType","path":"ContentType.html","kind":"annotation","full_name":"ContentType","name":"ContentType","abstract":false,"locations":[{"filename":"src/handler.cr","line_number":11,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"doc":"Annotation for forced return content type.\n\nNote: almost everytime default content type is \"application/json\".","summary":"<p>Annotation for forced return content type.</p>"},{"html_id":"fossil/Fossil","path":"Fossil.html","kind":"module","full_name":"Fossil","name":"Fossil","abstract":false,"locations":[{"filename":"src/errors.cr","line_number":2,"url":null},{"filename":"src/fossil.cr","line_number":9,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"A simple framework for building APIs.","summary":"<p>A simple framework for building APIs.</p>","types":[{"html_id":"fossil/Fossil/Endpoint","path":"Fossil/Endpoint.html","kind":"class","full_name":"Fossil::Endpoint","name":"Endpoint","abstract":true,"superclass":{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/router.cr","line_number":11,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil","kind":"module","full_name":"Fossil","name":"Fossil"},"doc":"Abstract Endpoint class. For each endpoint processing function\na new Endpoint class is created, and in `call` method arguments\nfor the function are extraxted and pased to the body of a function.","summary":"<p>Abstract Endpoint class.</p>","instance_methods":[{"html_id":"call(context:HTTP::Server::Context,path_params:Hash(String,Fossil::Param::PathParamType))-instance-method","name":"call","abstract":true,"args":[{"name":"context","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"path_params","external_name":"path_params","restriction":"Hash(String, Fossil::Param::PathParamType)"}],"args_string":"(context : HTTP::Server::Context, path_params : Hash(String, Fossil::Param::PathParamType))","args_html":"(context : HTTP::Server::Context, path_params : Hash(String, <a href=\"../Fossil/Param/PathParamType.html\">Fossil::Param::PathParamType</a>))","location":{"filename":"src/router.cr","line_number":12,"url":null},"def":{"name":"call","args":[{"name":"context","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"path_params","external_name":"path_params","restriction":"Hash(String, Fossil::Param::PathParamType)"}],"visibility":"Public","body":""},"external_var":false}]},{"html_id":"fossil/Fossil/Error","path":"Fossil/Error.html","kind":"module","full_name":"Fossil::Error","name":"Error","abstract":false,"locations":[{"filename":"src/errors.cr","line_number":2,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil","kind":"module","full_name":"Fossil","name":"Fossil"},"doc":"Inner Fossil errors.","summary":"<p>Inner Fossil errors.</p>","types":[{"html_id":"fossil/Fossil/Error/ParamParseError","path":"Fossil/Error/ParamParseError.html","kind":"class","full_name":"Fossil::Error::ParamParseError","name":"ParamParseError","abstract":false,"superclass":{"html_id":"fossil/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"fossil/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":18,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Error","kind":"module","full_name":"Fossil::Error","name":"Error"},"doc":"Error raised when router parameters cannot be parsed.","summary":"<p>Error raised when router parameters cannot be parsed.</p>","constructors":[{"html_id":"new(message=\"Cannotparseparam\")-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"\"Cannot parse param\"","external_name":"message","restriction":""}],"args_string":"(message = \"Cannot parse param\")","args_html":"(message = <span class=\"s\">&quot;Cannot parse param&quot;</span>)","location":{"filename":"src/errors.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"message","default_value":"\"Cannot parse param\"","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"fossil/Fossil/Error/RouteParamError","path":"Fossil/Error/RouteParamError.html","kind":"class","full_name":"Fossil::Error::RouteParamError","name":"RouteParamError","abstract":false,"superclass":{"html_id":"fossil/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"fossil/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":4,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Error","kind":"module","full_name":"Fossil::Error","name":"Error"},"doc":"Error raised when `Fossil::Router.new` is misused.","summary":"<p>Error raised when <code><a href=\"../../Fossil/Router.html#new%28path%3ANil%7CString%3Dnil%2Cparameter%3ANil%7CString%3Dnil%29-class-method\">Fossil::Router.new</a></code> is misused.</p>","constructors":[{"html_id":"new(message=\"Wrongrouteparameter\")-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"\"Wrong route parameter\"","external_name":"message","restriction":""}],"args_string":"(message = \"Wrong route parameter\")","args_html":"(message = <span class=\"s\">&quot;Wrong route parameter&quot;</span>)","location":{"filename":"src/errors.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"message","default_value":"\"Wrong route parameter\"","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"fossil/Fossil/Error/RouteTraceError","path":"Fossil/Error/RouteTraceError.html","kind":"class","full_name":"Fossil::Error::RouteTraceError","name":"RouteTraceError","abstract":false,"superclass":{"html_id":"fossil/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"fossil/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":11,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Error","kind":"module","full_name":"Fossil::Error","name":"Error"},"doc":"Error raised when path can not be traced from the router.","summary":"<p>Error raised when path can not be traced from the router.</p>","constructors":[{"html_id":"new(message=\"Cannottracetheroute\")-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"\"Cannot trace the route\"","external_name":"message","restriction":""}],"args_string":"(message = \"Cannot trace the route\")","args_html":"(message = <span class=\"s\">&quot;Cannot trace the route&quot;</span>)","location":{"filename":"src/errors.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"message","default_value":"\"Cannot trace the route\"","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]}]},{"html_id":"fossil/Fossil/MethodsEnum","path":"Fossil/MethodsEnum.html","kind":"enum","full_name":"Fossil::MethodsEnum","name":"MethodsEnum","abstract":false,"ancestors":[{"html_id":"fossil/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"fossil/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"fossil/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/methods.cr","line_number":11,"url":null}],"repository_name":"fossil","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"GET","name":"GET","value":"0"},{"id":"POST","name":"POST","value":"1"},{"id":"PUT","name":"PUT","value":"2"},{"id":"HEAD","name":"HEAD","value":"3"},{"id":"DELETE","name":"DELETE","value":"4"},{"id":"PATCH","name":"PATCH","value":"5"},{"id":"OPTIONS","name":"OPTIONS","value":"6"}],"namespace":{"html_id":"fossil/Fossil","kind":"module","full_name":"Fossil","name":"Fossil"},"doc":"Possible `HTTP::Request` methods.\n\nAnnotations of the same names are used for identifying endpoint functions.\nThis annotations are eximined on having unnamed parameter of type `Fossil::Router`.\n\n```\n@[GET(root / \"route_a\" / \"@param0:string\")]\ndef get_route_a(@[Fossil::Param::Path(name=\"param0\")] somestr : String)\n  ...\n```","summary":"<p>Possible <code>HTTP::Request</code> methods.</p>","instance_methods":[{"html_id":"delete?-instance-method","name":"delete?","doc":"Returns `true` if this enum value equals `DELETE`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#DELETE\">DELETE</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":16,"url":null},"def":{"name":"delete?","visibility":"Public","body":"self == DELETE"},"external_var":false},{"html_id":"get?-instance-method","name":"get?","doc":"Returns `true` if this enum value equals `GET`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#GET\">GET</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":12,"url":null},"def":{"name":"get?","visibility":"Public","body":"self == GET"},"external_var":false},{"html_id":"head?-instance-method","name":"head?","doc":"Returns `true` if this enum value equals `HEAD`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#HEAD\">HEAD</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":15,"url":null},"def":{"name":"head?","visibility":"Public","body":"self == HEAD"},"external_var":false},{"html_id":"options?-instance-method","name":"options?","doc":"Returns `true` if this enum value equals `OPTIONS`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#OPTIONS\">OPTIONS</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":18,"url":null},"def":{"name":"options?","visibility":"Public","body":"self == OPTIONS"},"external_var":false},{"html_id":"patch?-instance-method","name":"patch?","doc":"Returns `true` if this enum value equals `PATCH`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#PATCH\">PATCH</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":17,"url":null},"def":{"name":"patch?","visibility":"Public","body":"self == PATCH"},"external_var":false},{"html_id":"post?-instance-method","name":"post?","doc":"Returns `true` if this enum value equals `POST`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#POST\">POST</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":13,"url":null},"def":{"name":"post?","visibility":"Public","body":"self == POST"},"external_var":false},{"html_id":"put?-instance-method","name":"put?","doc":"Returns `true` if this enum value equals `PUT`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fossil/MethodsEnum.html#PUT\">PUT</a></code></p>","abstract":false,"location":{"filename":"src/methods.cr","line_number":14,"url":null},"def":{"name":"put?","visibility":"Public","body":"self == PUT"},"external_var":false}]},{"html_id":"fossil/Fossil/Param","path":"Fossil/Param.html","kind":"module","full_name":"Fossil::Param","name":"Param","abstract":false,"locations":[{"filename":"src/params.cr","line_number":2,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil","kind":"module","full_name":"Fossil","name":"Fossil"},"doc":"Endpoint parameters.","summary":"<p>Endpoint parameters.</p>","types":[{"html_id":"fossil/Fossil/Param/Body","path":"Fossil/Param/Body.html","kind":"annotation","full_name":"Fossil::Param::Body","name":"Body","abstract":false,"locations":[{"filename":"src/params.cr","line_number":37,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Annotation for body parameter argument in an endpoint function.\nThe body can be either xml, json or plain.","summary":"<p>Annotation for body parameter argument in an endpoint function.</p>"},{"html_id":"fossil/Fossil/Param/File","path":"Fossil/Param/File.html","kind":"annotation","full_name":"Fossil::Param::File","name":"File","abstract":false,"locations":[{"filename":"src/params.cr","line_number":33,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Annotation for file parameter argument in an endpoint function.\nThe annotation is examined for `:name` parameter,\nif not provided the external name is used for searching for the value.","summary":"<p>Annotation for file parameter argument in an endpoint function.</p>"},{"html_id":"fossil/Fossil/Param/Form","path":"Fossil/Param/Form.html","kind":"annotation","full_name":"Fossil::Param::Form","name":"Form","abstract":false,"locations":[{"filename":"src/params.cr","line_number":28,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Annotation for form parameter argument in an endpoint function.\nThe annotation is examined for `:name` parameter,\nif not provided the external name is used for searching for the value.\nIf value not found, `:alias` parameter may be used for search.","summary":"<p>Annotation for form parameter argument in an endpoint function.</p>"},{"html_id":"fossil/Fossil/Param/Path","path":"Fossil/Param/Path.html","kind":"annotation","full_name":"Fossil::Param::Path","name":"Path","abstract":false,"locations":[{"filename":"src/params.cr","line_number":16,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Annotation for path parameter argument in an endpoint function.\nThe annotation is examined for `:name` parameter,\nif not provided the external name is used for searching for the value.","summary":"<p>Annotation for path parameter argument in an endpoint function.</p>"},{"html_id":"fossil/Fossil/Param/PathParamType","path":"Fossil/Param/PathParamType.html","kind":"alias","full_name":"Fossil::Param::PathParamType","name":"PathParamType","abstract":false,"locations":[{"filename":"src/params.cr","line_number":4,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":true,"aliased":"(Int32 | String | UUID)","aliased_html":"Int32 | String | UUID","const":false,"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Union of possible types of path parameters.","summary":"<p>Union of possible types of path parameters.</p>"},{"html_id":"fossil/Fossil/Param/PathParamTypeEnum","path":"Fossil/Param/PathParamTypeEnum.html","kind":"enum","full_name":"Fossil::Param::PathParamTypeEnum","name":"PathParamTypeEnum","abstract":false,"ancestors":[{"html_id":"fossil/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"fossil/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"fossil/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/params.cr","line_number":7,"url":null}],"repository_name":"fossil","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Int","name":"Int","value":"0"},{"id":"UUID","name":"UUID","value":"1"},{"id":"String","name":"String","value":"2"}],"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Enum of possible types of path parameters.","summary":"<p>Enum of possible types of path parameters.</p>","instance_methods":[{"html_id":"int?-instance-method","name":"int?","doc":"Returns `true` if this enum value equals `Int`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fossil/Param/PathParamTypeEnum.html#Int\">Int</a></code></p>","abstract":false,"location":{"filename":"src/params.cr","line_number":8,"url":null},"def":{"name":"int?","visibility":"Public","body":"self == Int"},"external_var":false},{"html_id":"string?-instance-method","name":"string?","doc":"Returns `true` if this enum value equals `String`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fossil/Param/PathParamTypeEnum.html#String\">String</a></code></p>","abstract":false,"location":{"filename":"src/params.cr","line_number":10,"url":null},"def":{"name":"string?","visibility":"Public","body":"self == String"},"external_var":false},{"html_id":"uuid?-instance-method","name":"uuid?","doc":"Returns `true` if this enum value equals `UUID`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fossil/Param/PathParamTypeEnum.html#UUID\">UUID</a></code></p>","abstract":false,"location":{"filename":"src/params.cr","line_number":9,"url":null},"def":{"name":"uuid?","visibility":"Public","body":"self == UUID"},"external_var":false}]},{"html_id":"fossil/Fossil/Param/Query","path":"Fossil/Param/Query.html","kind":"annotation","full_name":"Fossil::Param::Query","name":"Query","abstract":false,"locations":[{"filename":"src/params.cr","line_number":22,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil/Param","kind":"module","full_name":"Fossil::Param","name":"Param"},"doc":"Annotation for query parameter argument in an endpoint function.\nThe annotation is examined for `:name` parameter,\nif not provided the external name is used for searching for the value.\nIf value not found, `:alias` parameter may be used for search.","summary":"<p>Annotation for query parameter argument in an endpoint function.</p>"}]},{"html_id":"fossil/Fossil/Router","path":"Fossil/Router.html","kind":"class","full_name":"Fossil::Router","name":"Router","abstract":false,"superclass":{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/router.cr","line_number":16,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil","kind":"module","full_name":"Fossil","name":"Fossil"},"doc":"Router class. A instance of a class is a node in a route tree.","summary":"<p>Router class.</p>","constructors":[{"html_id":"new(path:Nil|String=nil,parameter:Nil|String=nil)-class-method","name":"new","doc":"Initializer for `Router`.","summary":"<p>Initializer for <code><a href=\"../Fossil/Router.html\">Router</a></code>.</p>","abstract":false,"args":[{"name":"path","default_value":"nil","external_name":"path","restriction":"::Nil | ::String"},{"name":"parameter","default_value":"nil","external_name":"parameter","restriction":"::Nil | ::String"}],"args_string":"(path : Nil | String = nil, parameter : Nil | String = nil)","args_html":"(path : Nil | String = <span class=\"n\">nil</span>, parameter : Nil | String = <span class=\"n\">nil</span>)","location":{"filename":"src/router.cr","line_number":34,"url":null},"def":{"name":"new","args":[{"name":"path","default_value":"nil","external_name":"path","restriction":"::Nil | ::String"},{"name":"parameter","default_value":"nil","external_name":"parameter","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path, parameter)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"/(other:String):self-instance-method","name":"/","doc":"New `Router`s are implicitly created with calling a slash operator.\n```\nroot = Fossil::Router.new \"\"\nroot / \"route_a/its_child\"\nroot / \"route_b/@param1:int/info\"\n```","summary":"<p>New <code><a href=\"../Fossil/Router.html\">Router</a></code>s are implicitly created with calling a slash operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"String"}],"args_string":"(other : String) : self","args_html":"(other : String) : <span class=\"k\">self</span>","location":{"filename":"src/router.cr","line_number":52,"url":null},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"String"}],"return_type":"self","visibility":"Public","body":"slash_pos = other.index('/')\nif slash_pos.nil?\n  path = other\n  other = \"\"\nelse\n  path = other[...slash_pos]\n  other = other[(slash_pos + 1)..]\nend\n\nif path.starts_with?('@')\n  parameter, t = path[1..].split(':', 2, remove_empty: true)\n  parameter_t = Fossil::Param::PathParamTypeEnum.parse(t)\n\n  @param_children.each do |child_t, child|\n    if child_t == parameter_t\n      if child.parameter == parameter\n        return other == \"\" ? child : child / other\n      else\n        raise(Fossil::Error::RouteParamError.new(\"In each node path parameters with the same type must have the same name. Parameter of the same type with name `#{child.parameter}` was provided in another route\"))\n      end\n    end\n  end\n\n  new_child = Router.new(parameter: parameter)\n  @param_children[parameter_t] = new_child\n  return other == \"\" ? new_child : new_child / other\nelse\n  @children.each do |child|\n    if child.path == path\n      return other == \"\" ? child : child / other\n    end\n  end\n\n  new_child = Router.new(path: path)\n  @children << new_child\n  return other == \"\" ? new_child : new_child / other\nend\n"},"external_var":false},{"html_id":"children:Array(Router)-instance-method","name":"children","doc":"`Router`s that may can go after `self` and do not start with a path parameter.","summary":"<p><code><a href=\"../Fossil/Router.html\">Router</a></code>s that may can go after <code>self</code> and do not start with a path parameter.</p>","abstract":false,"location":{"filename":"src/router.cr","line_number":26,"url":null},"def":{"name":"children","return_type":"Array(Router)","visibility":"Public","body":"@children"},"external_var":false},{"html_id":"children=(children:Array(Router))-instance-method","name":"children=","doc":"`Router`s that may can go after `self` and do not start with a path parameter.","summary":"<p><code><a href=\"../Fossil/Router.html\">Router</a></code>s that may can go after <code>self</code> and do not start with a path parameter.</p>","abstract":false,"args":[{"name":"children","external_name":"children","restriction":"Array(Router)"}],"args_string":"(children : Array(Router))","args_html":"(children : Array(<a href=\"../Fossil/Router.html\">Router</a>))","location":{"filename":"src/router.cr","line_number":26,"url":null},"def":{"name":"children=","args":[{"name":"children","external_name":"children","restriction":"Array(Router)"}],"visibility":"Public","body":"@children = children"},"external_var":false},{"html_id":"endpoints:Hash(Fossil::MethodsEnum,Fossil::Endpoint)-instance-method","name":"endpoints","doc":"`Endpoint`s at the route that is resolved to current `Router`.","summary":"<p><code><a href=\"../Fossil/Endpoint.html\">Endpoint</a></code>s at the route that is resolved to current <code><a href=\"../Fossil/Router.html\">Router</a></code>.</p>","abstract":false,"location":{"filename":"src/router.cr","line_number":31,"url":null},"def":{"name":"endpoints","return_type":"Hash(Fossil::MethodsEnum, Fossil::Endpoint)","visibility":"Public","body":"@endpoints"},"external_var":false},{"html_id":"endpoints=(endpoints:Hash(Fossil::MethodsEnum,Fossil::Endpoint))-instance-method","name":"endpoints=","doc":"`Endpoint`s at the route that is resolved to current `Router`.","summary":"<p><code><a href=\"../Fossil/Endpoint.html\">Endpoint</a></code>s at the route that is resolved to current <code><a href=\"../Fossil/Router.html\">Router</a></code>.</p>","abstract":false,"args":[{"name":"endpoints","external_name":"endpoints","restriction":"Hash(Fossil::MethodsEnum, Fossil::Endpoint)"}],"args_string":"(endpoints : Hash(Fossil::MethodsEnum, Fossil::Endpoint))","args_html":"(endpoints : Hash(<a href=\"../Fossil/MethodsEnum.html\">Fossil::MethodsEnum</a>, <a href=\"../Fossil/Endpoint.html\">Fossil::Endpoint</a>))","location":{"filename":"src/router.cr","line_number":31,"url":null},"def":{"name":"endpoints=","args":[{"name":"endpoints","external_name":"endpoints","restriction":"Hash(Fossil::MethodsEnum, Fossil::Endpoint)"}],"visibility":"Public","body":"@endpoints = endpoints"},"external_var":false},{"html_id":"param_children:Hash(Fossil::Param::PathParamTypeEnum,Router)-instance-method","name":"param_children","doc":"`Router`s that may can go after `self` and do start with a path parameter.\nType of a parameter is a key in a `Hash`, so its capacity is equal to 3.","summary":"<p><code><a href=\"../Fossil/Router.html\">Router</a></code>s that may can go after <code>self</code> and do start with a path parameter.</p>","abstract":false,"location":{"filename":"src/router.cr","line_number":29,"url":null},"def":{"name":"param_children","return_type":"Hash(Fossil::Param::PathParamTypeEnum, Router)","visibility":"Public","body":"@param_children"},"external_var":false},{"html_id":"param_children=(param_children:Hash(Fossil::Param::PathParamTypeEnum,Router))-instance-method","name":"param_children=","doc":"`Router`s that may can go after `self` and do start with a path parameter.\nType of a parameter is a key in a `Hash`, so its capacity is equal to 3.","summary":"<p><code><a href=\"../Fossil/Router.html\">Router</a></code>s that may can go after <code>self</code> and do start with a path parameter.</p>","abstract":false,"args":[{"name":"param_children","external_name":"param_children","restriction":"Hash(Fossil::Param::PathParamTypeEnum, Router)"}],"args_string":"(param_children : Hash(Fossil::Param::PathParamTypeEnum, Router))","args_html":"(param_children : Hash(<a href=\"../Fossil/Param/PathParamTypeEnum.html\">Fossil::Param::PathParamTypeEnum</a>, <a href=\"../Fossil/Router.html\">Router</a>))","location":{"filename":"src/router.cr","line_number":29,"url":null},"def":{"name":"param_children=","args":[{"name":"param_children","external_name":"param_children","restriction":"Hash(Fossil::Param::PathParamTypeEnum, Router)"}],"visibility":"Public","body":"@param_children = param_children"},"external_var":false},{"html_id":"parameter:Nil|String-instance-method","name":"parameter","doc":"Name of a path parameter a path that can be resolved to one of the endpoints down the tree from the current node starts with.\nWhile `@path` is a whole fragment between two slashes, `@parameter` is parsed from a fragment \"@<parameter_name>:<parameter_type>\",\nwhere <parameter_type> is of type `Fossil::Param::PathParamTypeEnum` (string that can be parsed to this enum).","summary":"<p>Name of a path parameter a path that can be resolved to one of the endpoints down the tree from the current node starts with.</p>","abstract":false,"location":{"filename":"src/router.cr","line_number":23,"url":null},"def":{"name":"parameter","return_type":"Nil | String","visibility":"Public","body":"@parameter"},"external_var":false},{"html_id":"path:Nil|String-instance-method","name":"path","doc":"The first path fragment of a path that can be resolved to one of the endpoints down the tree from the current node.\nIf `@path.is_nil` the fragment is a path parameter.","summary":"<p>The first path fragment of a path that can be resolved to one of the endpoints down the tree from the current node.</p>","abstract":false,"location":{"filename":"src/router.cr","line_number":19,"url":null},"def":{"name":"path","return_type":"Nil | String","visibility":"Public","body":"@path"},"external_var":false},{"html_id":"trace(path:String,path_params={}ofString=>Fossil::Param::PathParamType):Tuple(Router,Hash(String,Fossil::Param::PathParamType))-instance-method","name":"trace","doc":"Trace `path` down the tree from the current router and pass all found path parameters in `path_params`.","summary":"<p>Trace <code><a href=\"../Fossil/Router.html#path%3ANil%7CString-instance-method\">#path</a></code> down the tree from the current router and pass all found path parameters in <code>path_params</code>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"path_params","default_value":"{} of String => Fossil::Param::PathParamType","external_name":"path_params","restriction":""}],"args_string":"(path : String, path_params = {} of String => Fossil::Param::PathParamType) : Tuple(Router, Hash(String, Fossil::Param::PathParamType))","args_html":"(path : String, path_params = {} <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">=&gt;</span> <span class=\"t\">Fossil</span><span class=\"t\">::</span><span class=\"t\">Param</span><span class=\"t\">::</span><span class=\"t\">PathParamType</span>) : Tuple(<a href=\"../Fossil/Router.html\">Router</a>, Hash(String, <a href=\"../Fossil/Param/PathParamType.html\">Fossil::Param::PathParamType</a>))","location":{"filename":"src/router.cr","line_number":93,"url":null},"def":{"name":"trace","args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"path_params","default_value":"{} of String => Fossil::Param::PathParamType","external_name":"path_params","restriction":""}],"return_type":"Tuple(Router, Hash(String, Fossil::Param::PathParamType))","visibility":"Public","body":"slash_pos = path.index('/')\nif slash_pos.nil?\n  current = path\n  path = \"\"\nelse\n  current = path[...slash_pos]\n  path = path[(slash_pos + 1)..]\nend\n\ncandidates = @children.select do |child| child.path == current end\nif candidates.size == 1\n  child = candidates[0]\n  return path == \"\" ? {child, path_params} : child.trace(path, path_params)\nend\nif @param_children.empty?\n  raise(Fossil::Error::RouteTraceError.new(\"Unable to parse #{(current + \"/\") + path}\"))\nend\n\nchild = self\nis_parsed = false\nif @param_children.has_key?(Fossil::Param::PathParamTypeEnum::Int)\n  child = @param_children[Fossil::Param::PathParamTypeEnum::Int]\n  if param = child.parameter\n    if parsed = current.to_i?\n      is_parsed = true\n      path_params[param] = parsed\n    end\n  end\nend\nif (!is_parsed) && (@param_children.has_key?(Fossil::Param::PathParamTypeEnum::UUID))\n  child = @param_children[Fossil::Param::PathParamTypeEnum::UUID]\n  if param = child.parameter\n    begin\n      parsed_uuid : UUID | ::Nil = UUID.new(current)\n    rescue\n      nil\n    end\n    if parsed = parsed_uuid\n      is_parsed = true\n      path_params[param] = parsed\n    end\n  end\nend\nif (!is_parsed) && (@param_children.has_key?(Fossil::Param::PathParamTypeEnum::String))\n  child = @param_children[Fossil::Param::PathParamTypeEnum::String]\n  if param = child.parameter\n    is_parsed = true\n    path_params[param] = current\n  end\nend\n\nif is_parsed\nelse\n  raise(Fossil::Error::RouteTraceError.new)\nend\nif child.nil?\n  raise(Fossil::Error::RouteTraceError.new(\"Nil child\"))\nend\nreturn path == \"\" ? {child, path_params} : child.trace(path, path_params)\n"},"external_var":false}]},{"html_id":"fossil/Fossil/Server","path":"Fossil/Server.html","kind":"class","full_name":"Fossil::Server","name":"Server","abstract":false,"superclass":{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fossil/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fossil/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/server.cr","line_number":11,"url":null}],"repository_name":"fossil","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fossil/Fossil","kind":"module","full_name":"Fossil","name":"Fossil"},"doc":"Wrapper around `HTTP::Server` that holds the root `Fossil::Router` for the app.","summary":"<p>Wrapper around <code>HTTP::Server</code> that holds the root <code><a href=\"../Fossil/Router.html\">Fossil::Router</a></code> for the app.</p>","constructors":[{"html_id":"new(*,root_path:String=\"\",handlers:Indexable(HTTP::Handler)=[]ofHTTP::Handler)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"root_path","default_value":"\"\"","external_name":"root_path","restriction":"String"},{"name":"handlers","default_value":"[] of HTTP::Handler","external_name":"handlers","restriction":"Indexable(HTTP::Handler)"}],"args_string":"(*, root_path : String = \"\", handlers : Indexable(HTTP::Handler) = [] of HTTP::Handler)","args_html":"(*, root_path : String = <span class=\"s\">&quot;&quot;</span>, handlers : Indexable(HTTP::Handler) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Handler</span>)","location":{"filename":"src/server.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"root_path","default_value":"\"\"","external_name":"root_path","restriction":"String"},{"name":"handlers","default_value":"[] of HTTP::Handler","external_name":"handlers","restriction":"Indexable(HTTP::Handler)"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(root_path: root_path, handlers: handlers)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"bind(uri:String):Socket::Address-instance-method","name":"bind","doc":"Binds an inner `HTTP::Server` to `uri`.","summary":"<p>Binds an inner <code>HTTP::Server</code> to <code>uri</code>.</p>","abstract":false,"args":[{"name":"uri","external_name":"uri","restriction":"String"}],"args_string":"(uri : String) : Socket::Address","args_html":"(uri : String) : Socket::Address","location":{"filename":"src/server.cr","line_number":74,"url":null},"def":{"name":"bind","args":[{"name":"uri","external_name":"uri","restriction":"String"}],"return_type":"Socket::Address","visibility":"Public","body":"@http_server.bind(uri)"},"external_var":false},{"html_id":"bind(uri:URI):Socket::Address-instance-method","name":"bind","doc":"Binds an inner `HTTP::Server` to `uri`.","summary":"<p>Binds an inner <code>HTTP::Server</code> to <code>uri</code>.</p>","abstract":false,"args":[{"name":"uri","external_name":"uri","restriction":"URI"}],"args_string":"(uri : URI) : Socket::Address","args_html":"(uri : URI) : Socket::Address","location":{"filename":"src/server.cr","line_number":79,"url":null},"def":{"name":"bind","args":[{"name":"uri","external_name":"uri","restriction":"URI"}],"return_type":"Socket::Address","visibility":"Public","body":"@http_server.bind(uri)"},"external_var":false},{"html_id":"close:Nil-instance-method","name":"close","doc":"Gracefully terminates the server. It will process currently accepted\nrequests, but it won't accept new connections.","summary":"<p>Gracefully terminates the server.</p>","abstract":false,"location":{"filename":"src/server.cr","line_number":102,"url":null},"def":{"name":"close","return_type":"Nil","visibility":"Public","body":"@http_server.close"},"external_var":false},{"html_id":"http_server:HTTP::Server-instance-method","name":"http_server","abstract":false,"location":{"filename":"src/server.cr","line_number":13,"url":null},"def":{"name":"http_server","return_type":"HTTP::Server","visibility":"Public","body":"@http_server"},"external_var":false},{"html_id":"listen(port:Int32,reuse_port:Bool=false)-instance-method","name":"listen","doc":"Creates a `TCPServer` listening on `127.0.0.1:port`, adds it as a socket\nand starts the server. Blocks until the server is closed.","summary":"<p>Creates a <code>TCPServer</code> listening on <code>127.0.0.1:port</code>, adds it as a socket and starts the server.</p>","abstract":false,"args":[{"name":"port","external_name":"port","restriction":"Int32"},{"name":"reuse_port","default_value":"false","external_name":"reuse_port","restriction":"Bool"}],"args_string":"(port : Int32, reuse_port : Bool = false)","args_html":"(port : Int32, reuse_port : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/server.cr","line_number":85,"url":null},"def":{"name":"listen","args":[{"name":"port","external_name":"port","restriction":"Int32"},{"name":"reuse_port","default_value":"false","external_name":"reuse_port","restriction":"Bool"}],"visibility":"Public","body":"@http_server.listen(port, reuse_port)"},"external_var":false},{"html_id":"listen(host:String,port:Int32,reuse_port:Bool=false)-instance-method","name":"listen","doc":"Creates a `TCPServer` listening on `host:port`, adds it as a socket\nand starts the server. Blocks until the server is closed.","summary":"<p>Creates a <code>TCPServer</code> listening on <code>host:port</code>, adds it as a socket and starts the server.</p>","abstract":false,"args":[{"name":"host","external_name":"host","restriction":"String"},{"name":"port","external_name":"port","restriction":"Int32"},{"name":"reuse_port","default_value":"false","external_name":"reuse_port","restriction":"Bool"}],"args_string":"(host : String, port : Int32, reuse_port : Bool = false)","args_html":"(host : String, port : Int32, reuse_port : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/server.cr","line_number":91,"url":null},"def":{"name":"listen","args":[{"name":"host","external_name":"host","restriction":"String"},{"name":"port","external_name":"port","restriction":"Int32"},{"name":"reuse_port","default_value":"false","external_name":"reuse_port","restriction":"Bool"}],"visibility":"Public","body":"@http_server.listen(host, port, reuse_port)"},"external_var":false},{"html_id":"listen:Nil-instance-method","name":"listen","doc":"Starts the server. Blocks until the server is closed.","summary":"<p>Starts the server.</p>","abstract":false,"location":{"filename":"src/server.cr","line_number":96,"url":null},"def":{"name":"listen","return_type":"Nil","visibility":"Public","body":"@http_server.listen"},"external_var":false},{"html_id":"root:Fossil::Router-instance-method","name":"root","abstract":false,"location":{"filename":"src/server.cr","line_number":12,"url":null},"def":{"name":"root","return_type":"Fossil::Router","visibility":"Public","body":"@root"},"external_var":false}]}]}]}}